const sortByDisplayOrder = require("./src/utils/sort-by-display-order.js");
const dateFilter = require("./src/filters/date-filter.js");
const w3dateFilter = require("./src/filters/w3-date-filter.js");
const pluginRss = require("@11ty/eleventy-plugin-rss");

const htmlMin = require("html-minifier-terser");

const postcss = require("postcss");
const postcssImport = require("postcss-import");
const postcssImportExtGlob = require("postcss-import-ext-glob");
// const tailwindcss = require("tailwindcss")
const autoprefixer = require("autoprefixer");
const cssnano = require("cssnano");

module.exports = (config) => {
  ["./src/images", "./src/fonts"].forEach((path) => {
    config.addPassthroughCopy(path);
  });

  config.addCollection("work", (collection) => {
    return sortByDisplayOrder(collection.getFilteredByGlob("./src/work/*.md"));
  });
  config.addCollection("featuredWork", (collection) => {
    return sortByDisplayOrder(
      collection
        .getFilteredByGlob("./src/work/*.md")
        .filter((x) => x.data.featured)
    );
  });
  config.addCollection("blog", (collection) => {
    return [...collection.getFilteredByGlob("./src/posts/*.md")].reverse();
  });
  config.addCollection("people", (collection) => {
    return collection.getFilteredByGlob("./src/people/*.md").sort((a, b) => {
      return Number(a.fileSlug) > Number(b.fileSlug) ? 1 : -1;
    });
  });

  config.addFilter("dateFilter", dateFilter);
  config.addFilter("w3DateFilter", w3dateFilter);

  config.addPlugin(pluginRss);

  config.addTransform("html-minify", (content, path) => {
    if (path && path.endsWith(".html")) {
      return htmlMin.minify(content, {
        collapseBooleanAttributes: true,
        collapseWhitespace: true,
        decodeEntities: true,
        includeAutoGeneratedTags: false,
        removeComments: true,
      });
    }

    return content;
  });

  config.addTemplateFormats("css");

  config.addExtension("css", {
    outputFileExtension: "css",
    compile: async (content, path) => {
      if (path !== "./src/styles/main.css") {
        return;
      }

      return async () => {
        let output = await postcss([
          postcssImportExtGlob,
          postcssImport,
          autoprefixer,
          cssnano,
        ]).process(content, {
          from: path,
        });

        return output.css;
      };
    },
  });

  return {
    markdownTemplateEngine: "njk",
    dataTemplateEngine: "njk",
    htmlTemplateEngine: "njk",
    dir: {
      input: "src",
      output: "dist",
    },
  };
};
